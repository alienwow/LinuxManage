
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    charset utf-8;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $request_body "$http_referer" '
                      '"$http_user_agent" "$proxy_add_x_forwarded_for" "$request_time" '
                      '"$upstream_addr" "$upstream_response_time"';
    access_log  /var/log/nginx/access.log  main;

    #隐藏版本号
    server_tokens off;
    keepalive_requests 100;
    keepalive_timeout  65;

    # gzip 模块设置开始
    gzip on;                    # 表示开启压缩功能
    gzip_static on;             # 标识开启静态压缩
    gzip_min_length 1k;         # 表示允许压缩的页面最小字节数， 默认值: 0 ，不管页面多大都压缩
                                #   页面字节数从header头的Content-Length中获取。
                                #   建议设置成大于1k的字节数，小于1k可能会越压越大。 即: gzip_min_length 1024
    gzip_buffers 4 32k;         # 压缩缓存区大小 默认值: gzip_buffers 4 4k/8k
                                #   设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。
                                #   例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 
                                #   4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。
                                #   如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。
    gzip_http_version 1.1;      # 默认值: gzip_http_version 1.1(就是说对HTTP/1.1协议的请求才会进行gzip压缩)
                                #   识别http的协议版本。由于早期的一些浏览器或者http客户端，可能不支持gzip自解压，用户就会看到乱码，所以做一些判断还是有必要的。 
                                #    注：99.99%的浏览器基本上都支持gzip解压了，所以可以不用设这个值,保持系统默认即可。
                                #   假设我们使用的是默认值1.1，如果我们使用了proxy_pass进行反向代理，那么nginx和后端的upstream server之间是用HTTP/1.0协议通信的，如果我们使用nginx通过反向代理做Cache Server，而且前端的nginx没有开启gzip，同时，我们后端的nginx上没有设置gzip_http_version为1.0，那么Cache的url将不会进行gzip压缩
    gzip_comp_level 4;          # gzip压缩比/压缩级别，压缩级别 1-9，默认值：1(建议选择为4)
                                #   级别越高压缩率越大，当然压缩时间也就越长（传输快但比较消耗cpu）
    gzip_types text/html text/plain text/javascript text/css text/xml application/xml application/javascript application/json;
                                # 指定压缩的类型
                                # 不推荐对图片进行压缩，本身已经压缩过
                                # 推荐压缩文本类型的数据
    gzip_vary on;               # vary header支持
    # gzip 模块设置结束


    # sendfile参数用于开启文件的高效传输模式。
    # 同时将tcp_nopush和tcp_nodelay两个指令设置为on，可防止网络及磁盘i/o阻塞，提升nginx工作效率
    #放在http，server，location都可以
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    # 打开目录浏览功能
    autoindex off;
    # 默认为on，显示出文件的确切大小，单位是bytes。
    #   改为off后，显示出文件的大概大小，单位是kB或者MB或者GB
    autoindex_exact_size off;
    # 默认为off，显示的文件时间为GMT时间。
    #   改为on后，显示的文件时间为文件的服务器时间
    autoindex_localtime off;

    include /etc/nginx/conf.d/*.conf;
}
